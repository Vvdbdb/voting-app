version: "3.8"

services:
  db:
    image: postgres:${POSTGRES_VERSION}
    container_name: db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - private_net

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - private_net

  vote:
    build: ./vote
    container_name: vote
    ports:
      - "${VOTE_PORT}:80"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - public_net
      - private_net

  result:
    build: ./result
    container_name: result
    ports:
      - "${RESULT_PORT}:80"
    environment:
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - public_net
      - private_net

  worker:
    build: ./worker
    container_name: worker
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - private_net

  jenkins:
    build: ./jenkins
    container_name: jenkins
    user: root
    ports:
      - "${JENKINS_PORT:-8080}:8080"
      - "${JENKINS_AGENT_PORT:-50000}:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    networks:
      - public_net
      - private_net
  
  sonarqube:
    image: sonarqube:lts
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - public_net
      - private_net

  sonarscanner:
    build: ./
    container_name: sonarscanner
    environment:
      - SONAR_HOST_URL=${SONAR_HOST_URL}
      - SONAR_TOKEN=${SONAR_TOKEN}
    networks:
      - private_net
      - public_net
    volumes:
      - .:/usr/src

volumes:
  db_data:
  jenkins_home:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:

networks:
  public_net:
    driver: bridge
  private_net:
    driver: bridge
